package runner

// CodeData contains the data necessary for running the code
type CodeData struct {
	ID         string   `flagUsage:"Code ID"`
	Language   string   `flagUsage:"Language the code belongs to"`
	Filename   string   `flagUsage:"the name of the file"`
	Code       string   `flagUsage:"code to be evaluate"`
	Path       string   `flagUsage:"the path of the code file"`
	Image      string   `flagUsage:"Path to docker image"`
	TestCount  int      `flagUsage:"Number of testsPoint"`
	InputData  []string `flagUsage:"input data for running"`
	OutputData []string `flagUsage:"output data generated by running program"`
	TimeLimit  int      `flagUsage:"time limit for program"`
	MemLimit   int64    `flagUsage:"memory limit for program"`
}

// CodeResult contains the evaluation result
// by comparing the outputData with expected output
type CodeResult struct {
	ID      string
	Status  string    `flagUsage:"status of program output"`
	Message string    `flagUsage:"error message or others generated by the program"`
	Time    []float64 `flagUsage:"Time records for each test point"`
	Memory  []float64 `flagUsage:"Memory records for each test point"`
	Result  []string  `flagUsage:"Result by running the program"`
	Error   []string  `flagUsage:"Error Message"`
}
